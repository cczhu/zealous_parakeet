\section{Codes and Initial Conditions}
\label{sec:c3_codes}

To better understand both the code comparison in this chapter, as well as prefacing some of our future discussion, we present an extremely short and mostly qualitative discussion on the operating principles of smoothed particle and moving mesh hydrodynamics.  The historical development of both methods is long and involved, and, as improving hydrodynamic simulations is not the focus of this thesis, we refer the reader to review articles referenced throughout this section for further reading.

We with the equations of ideal magnetohydrodynamics in their conservative form and with Gaussian units (eg. \citealt{goedp04, pakmv13}, \citealt{feidc12} Sec. 3),

\begin{eqnarray}
\ptl_t\rho + \ptl_j(\rho u^j) &=& 0 \nonumber \\
\ptl_t(\rho u^i) + \ptl_j(\rho u^iu^j + \delta^{ij}P_\mrm{tot} - \frac{1}{4\pi}B^iB^j) &=& \rho \ptl^i\Phi \nonumber \\
\ptl_t(\rho e) + \ptl^j\left(u_j (\rho e + P_\mrm{tot}) - \frac{B_j}{4\pi}(u^lB_l)\right) &=& u_j\rho \ptl^j\Phi \nonumber \\
\ptl_t B^i - \ptl_j(u^iB^j - u^jB^i) &=& 0,
\label{eqn:c3_mhd_eqns}
\end{eqnarray}

\noindent where $\rho$, $u^i$, $B^i$, and $\Phi$ are the density, velocity, magnetic field and gravitational potential, respectively, $P_\mathrm{tot} = P + \frac{1}{8\pi}B_jB^j$ is the total pressure, $e = \frac{1}{2}u_iu^i + e_\mathrm{int} + \frac{B^2}{8\pi\rho}$ is the specific total energy, and the usual Einstein summation convention holds.  This can be written in compact form:

\eqbegin
\frac{\ptl {\bf U}}{\ptl t} + \nabla\cdot{\bf F(U)} = {\bf G}
\label{eqn:c3_mhd_eqns_compact}
\eqend

where

\eqbegin
{\bf U} = 
\left( \begin{array}{c}
\rho \\
\rho {\bf u} \\
\rho e \\
{\bf B} \end{array} \right),
\label{eqn:c3_mhd_eqns_u}
\eqend

\eqbegin
{\bf F(U)} = 
\left( \begin{array}{c}
\rho {\bf u} \\
\rho {\bf u}{\bf u}^T + P_\mathrm{tot} - \frac{1}{4\pi}{\bf B}{\bf B}^T \\
{\bf u} (e + P_\mathrm{tot}) - {\bf B}{4\pi}({\bf u}\cdot{\bf B}) \\
{\bf B}{\bf u}^T - {\bf u}{\bf B}^T\end{array} \right),
\label{eqn:c3_mhd_eqns_fu}
\eqend

\eqbegin
{\bf G} = 
\left( \begin{array}{c}
0 \\
\rho g^i \\
u_j\rho g^j \\
0 \end{array} \right)
\label{eqn:c3_mhd_eqns_g}
\eqend

\subsection{Traditional Smoothed-Particle Hydrodynamics}
\label{ssec:c3_sph}

{\charles XXXXXXXXXXXXXXXXXXXXX}

\subsection{GASOLINE SPH Code}
\label{ssec:c3_gasoline}

\gasoline\ is a modular, tree-based SPH code that we previously used to explore the parameter space of CO WD mergers in \citeauthor{zhu+13} (\citeyear{zhu+13}; henceforth \citeal{zhu+13}).  Code settings and initial conditions used in this work are nearly identical to those used in \citeal{zhu+13}, and we refer the reader to that paper for further details.  We utilize \gasoline's default \cite{hernk89} kernel with 100 neighbours, and use the asymmetric energy formulation (\citeauthor{wadssq04}, Eqn. 8) to time-evolve particle internal energy.  Artificial viscosity is provided using the standard Monaghan \& Gingold formulation (see \citealt{mona05}), and dynamically controlled using a combination of a \cite{bals95} switch and time-variable coefficients (eg. \citealt{dola+05}) for the linear $\alpha$ and quadratic $\beta$ viscosity terms ($\alpha\,=0.05$, $\beta\,=0.1$ when shocks are not present, and approximately unity when they are).  We utilize the Helmholtz equation of state\footnote{Available at \url{http://cococubed.asu.edu/}.} (EOS; \citealt{timms00}) to properly represent arbitrarily degenerate and relativistic gases.  Since \gasoline\ evolves density and entropy, while Helmholtz uses density and temperature, a Newton-Raphson inverter is included in the EOS to determine the latter from the former.  To keep the energy-temperature relation positive-definite for the inverter, we enable Coulomb corrections even when the total entropy becomes negative.  SPH noise ocassionally brings highly degenerate particles to below the Fermi energy.  Under these conditions we set the pressure to the Fermi pressure, but let the energy freely evolve (see \citealt{zhu+13}, Sec. 4.6).

Like in our previous work, we ignore outer hydrogen and helium layers, composition gradients, and any nuclear reactions, in order to focus on the merger hydrodynamics.  Previous work that did include nuclear reactions \citep{loreig09,dan+12}, and in one case an outer helium layer \citep{rask+12}, have shown that they play a negligible role in the hydrodynamics of a $0.625 - 0.65\,\Msun$ CO WD merger.  More massive binaries, as well as less massive ones involving a CO-He hybrid WD, may experience He or CO detonantions during the merger \citep{pakm+10, rask+12, dan+12}.

We use the same version of \gasoline\ as \citeal{zhu+13}, which does not include the improvements recently introduced in \textsc{Gasoline2} \citep{kell+15, tamb+15} and \textsc{ChaNGa/Gasoline} \citep{gove+15}.  These include a turbulent diffusion scheme to facilitate fluid mixing \citep{shen+10} and the use of a geometric density-averaged term in the SPH force expression (\citealt{kell+14}; practically equivalent to the pressure-entropy formulation of \cite{hopk13}) to eliminate numerical surface tension at contact discontinuities, which collectively allow for proper growth of hydrodynamic instabilities.  We also do not consider more advanced prescriptions for viscosity, such as a Godunov-SPH scheme (eg. \citealt{chaw16}), as these are generally not implemented in SPH codes.  We again stress that the purpose of this work is to compare the ``classical'' SPH formulation, used in almost all merger simulations to date, to moving mesh \arepo, and we leave comparisons with improved and modified SPH schemes to future work.

\subsection{AREPO Moving Mesh Code}
\label{ssec:c3_arepo}

We now introduce the moving-mesh magnetohydrodynamics methods of \arepo, summarizing \cite{spri10}, \cite{pakmbs11} and \cite{pakms13}.  This will be done more detail than for SPH to preface the discussion of numerical issues in Sec. \ref{sec:c3_fixingarepo}.


{\arepo} discretizes a fluid using an unstructured mesh.  The mesh is constructed by Voronoi tesselation of a set of mesh generating points, and these points are given velocities to follow local fluid motion in a Lagrangian fashion.  This results in a mesh that deforms over time to track the evolution of the fluid, without the mesh-tangling effects that hindered previous moving mesh schemes.  Mesh generating point velocities are slightly altered from their pure Lagrangian values to keep the Voronoi mesh regular, reducing flux calculation errors.  Additional velocity adjustments can be made to keep cells near a constant mass or volume, but in practice this becomes ineffective for highly non-linear flows.  Fluid fluxes between cells are calculated using a second-order Godunov scheme with an exact Riemann solver (in our case HLLD), while self-gravity is handled using a TreePM solver, nearly identical to the one used by SPH code \textsc{gadget2} \citep{spri05}.




{\charles SOME STUFF ABOUT THE MESH; ASK RUEDIGER ABOUT HOW MHD WORKS!!!}

On this mesh, \arepo\ tracks the finite volume integral of ${\bf U}$ for each cell, i.e. 

\eqbegin
{\bf Q} = \int_{V} {\bf U}dV = \left( \begin{array}{c}
m \\
{\bf p} \\
E \\
{\bf B} V \end{array} \right),
\eqend

\noindent where $m$ is the cell mass, ${\bf p}$ its momentum, $E$ its total energy and ${\bf B} V$ the magnetic field multiplied by the cell volume (${\bf B} V$.  If the divergence-cleaning method of \cite{pakmbs11} is adopted, an additional scalar quantity is appended to ${\bf Q}$ and to ${\bf W}$, below, but the overall equations remain unchanged (see {\charles Ch. XXX}).  The time-evolution for cell $i$ from timestep $n$ to $n+1$ is then given by

\eqbegin
{\bf Q}_i^{n+1} = {\bf Q}_i^n - \Delta t\sum_j A_{ij} {\bf \hat{F}}_{ij}^{n + 1/2}
\label{eq:c3_arepo_timeadv}
\eqend

\noindent where $\Delta t$ is the timestep, $j$ stands for all cells that border cell $i$, $A_{ij}$ is the oriented area of the face dividing cells $i$ and $j$ and ${\bf \hat{F}}_{ij}$ is the estimated flux between them (positive flux means escaping from $i$).  In practice fluxes are more easily calculated using primitive variables 

% They're more easily calculated because of the Galilean transforms needed to determine cell fluxes, and to make self-gravity easier to calculate.

\eqbegin
{\bf W} = \left( \begin{array}{c}
\rho \\
{\bf v} \\
P \\
B \end{array} \right),
\eqend

\noindent then converted back to ${\bf Q}$.  Fluxes are calculated in the frame of face $A_{ij}$ (then boosted back into the simulation frame of reference) to maintain Galilean invariance.  This means that each hydrodynamic step first calculates the Voronoi mesh and assigns velocities ${\bf w}_i$ to the mesh-generating points before calculating $W$ and ${\bf \hat{F}}$ and then advancing time using Eqn. \ref{eq:c3_arepo_timeadv} (see \cite{spri10}, Sec. 3).  Under standard \arepo\ operation, ${\bf w}_i$ is the same as cell fluid speed ${\bf v_i}$, with a small corrective term to keep the mesh regular, but ${\bf w}_i$ could also be set to zero, turning \arepo\ into a static unstructured-grid code.

Once the velocities are set, the flux across $A_{ij}$ can be determined from the (boosted) primitive values at either side -- which we term the ``left'' and ``right'' states, respectively -- of the face's centroid.  In \arepo's original formulation \citep{spri10}, these values are determined from their respective cell's ${\bf W}$ using the MUSCL-Hancock approach of a piecewise linear spatial reconstruction and a first-order time-extrapolation by half a timestep:

\eqbegin
{\bf W}_\mrm{L,R}^\mrm{interface} = {\bf W}_\mrm{L,R} + {\bf \frac{\partial W}{\partial r}}\Bigr|_\mrm{L,R}({\bf f} - {\bf s}_\mrm{L,R}) + {\bf \frac{\partial W}{\partial t}}\Bigr|_\mrm{L,R}\frac{\Delta t}{2},
\label{eq:c3_muscl_hancock}
\eqend

\noindent where $f$ is position of $A_{ij}$'s centroid, and $s$ each cell's center-of-mass.  The temporal gradient can be solved using the spatial gradient through the Euler equations, while the spatial gradient is estimated by taking advantage of the Green-Gauss theorem (the surface integral of a scalar field $\phi$ is equal to the volume integral of its divergence):

\eqbegin
\left\langle \nabla \phi \right\rangle_i = \frac{1}{V_i} \sum_j \phi({\bf f}_{ij}){\bf A_{ij}},
\label{eq:c3_gauss_green}
\eqend

\noindent taking advantage of the Voronoi mesh to estimate $\phi({\bf f}_{ij})$.  Once calculated, the gradient estimate is slope-limited before being used in Eqn. \ref{eq:c3_muscl_hancock} (\cite{spri10} Eqns. 28 - 30).  The flux is then resolved from ${\bf W}_\mrm{L,R}^\mrm{interface}$ with a Riemann solver (in all our simulations, HLLD; \citealt{miyok05}).  Eqns. \ref{eq:c3_muscl_hancock} and \ref{eq:c3_gauss_green} were replaced in \cite{pakm+16} order to resolve \arepo's angular momentum conservation issue, but the overall flux calculation procedure remains the same as above.

The self-gravity term ${\bf G}$ can easily be added to the flux calculation, since, when calculating with ${\bf W}$, gravity only changes the momentum.  This change, and the corresponding one for kinetic energy, can then be appended to ${\bf Q}$ (\citealt{spri10} Sec. 5.2).

%{\arepo} discretizes a fluid using an unstructured mesh.  The mesh is constructed by Voronoi tesselation of a set of mesh generating points, and these points are given velocities to follow local fluid motion in a Lagrangian fashion.  This results in a mesh that deforms over time to track the evolution of the fluid, without the mesh-tangling effects that hindered previous moving mesh schemes.  Mesh generating point velocities are slightly altered from their pure Lagrangian values to keep the Voronoi mesh regular, reducing flux calculation errors.  Additional velocity adjustments can be made to keep cells near a constant mass or volume, but in practice this becomes ineffective for highly non-linear flows.  Fluid fluxes between cells are calculated using a second-order Godunov scheme with an exact Riemann solver (in our case HLLD), while self-gravity is handled using a TreePM solver, nearly identical to the one used by SPH code \textsc{gadget2} \citep{spri05}.

We use the same Helmholtz EOS in \arepo\ that we installed into \gasoline\ and also ignore composition gradients and any nuclear reactions.  To assure a reasonably constant mass resolution (and other, similar criteria), we use an explicit refinement scheme \citep{voge+12} that adds or subtracts mesh-generating points to the grid.  This keeps cell masses near a fixed value, and to keep all cell volumes within one order of magnitude of each other.

\subsection{Initial Conditions and Completion Time}
\label{ssec:c3_initcond}

Our chosen WD masses are typical of the narrowly peaked empirical mass distribution of field CO WDs \citep{tremb09, klei+13}.  As in \citeal{zhu+13}, we generated WDs by rescaling a sphere of particles to the proper enclosed mass-radius relation determined from 1D hydrostatic integration.  We used a 50\% C, 50\% O composition by mass uniform throughout the star, and assumed a uniform temperature of $5\times 10^6$ K.  The stars were placed into \gasoline for approximately 11 dynamical times (33.3 s for the $0.625\,\Msun$ WD and 31.3 s for the $0.65\,\Msun$ WD).  Thermal energy and particle velocity were damped to $\sim 5 \times 10^6$ K and 0 cm s$^{-1}$ during the first dynamical time, and left free during the remaining 10 dynamical times.  64 neighbours, rather than 100, were used during relaxation to minimize the number of particle pairs generated.  These pairs (ex. \citealt{dehna12}, \citealt{spri10rev}) do not change global properties of the relaxed WDs, but do effectively reduce spatial resolution and having too many of them make transferring SPH initial conditions into \arepo\ problematic.  Following relaxation, the density profile of both stars were consistent with the hydrostatic equilibrium solution, with the numerical central densities deviating from the 1D integrated ones by less than 1\%.  Since all particles have identical mass, the tenuous outer layers of the WDs are difficult to capture in \gasoline; consequently the radii of the relaxed stars, as defined by the outermost particle, were $\sim 4$\% smaller than the integrated ones.  Even after energy damping, particle noise prevents the central temperature of the relaxed stars from reaching below $\sim 1\times 10^7$ K, so all particle temperatures were artificially reset to $\sim 5 \times 10^6$ K.

We then placed the relaxed stars in a circular, unsynchronized binary, with initial separation $\azero = 2.2\times10^9\,\mrm{cm}$ chosen (using the approximation of \citealt{eggl83}) so that the $0.625\,\Msun$ donor will just overflow its Roche lobe.\footnote{The hydrostatic equilibrium solution radius was used to calculate \azero, rather than the smaller relaxed SPH star radius.  This accounts for the small differences in initial conditions between this work and the equivalent simulation in \citeal{zhu+13}.}  The corresponding orbital period is $49.5\,\mrm{s}$.  These initial conditions do not account for the tidal bulges of the stars, and so are not fully equilibrated (eg. \citealt{dan+11}).  While this means our initial conditions do not reflect ``real'' CO WD binaries with complete accuracy, we stress that the purpose of this work is to discover any code dependence on merger evolution, rather than providing the final word in WD merger simulations.

We generate initial conditions in \arepo\ by converting the SPH particles of the \gasoline\ initial conditions to be mesh-generating points, while retaining their conservative quantities (mass, momentum and energy).  These initial conditions are not guaranteed to be regular, but \arepo\ regularizes the mesh over just a few timesteps by nudging each cell's mesh-generating points to their cell's center of mass.  

%We perform both low and high mass resolution versions of our simulations.  Our SPH particles all have the same mass, which is set to $1\times10^{28}\,\mrm{g}$ at low resolution, comparable to those used in parameter-space sweeps \citep{dan+12, zhu+13, dan+14}, and to $2\times10^{27}\,\mrm{g}$ at high resolution, comparable to the highest resolutions used in other recent work \citep{pakm+12, rask+13}.  We likewise set the \arepo\ explicit refinement scheme's target mass to $1\times10^{28}\,\mrm{g}$ at low resolution and $2\times10^{27}\,\mrm{g}$ at high resolution to give them approximately the same mass resolution as their \gasoline\ counterparts.  Consequentely, our spatial resolution in \gasoline\ is about a factor of five lower than that in \arepo\ at either low or high mass resolution, but because the two codes differ so greatly from each other regardless of resolution, we believe equivalent mass resolution to be the most appropriate comparison (see \citeauthor{voge+12} for complications in achieving equivalent accuracy in SPH and grid codes).  We additionally initialize a background grid of $10^{-5}$ {\gcc} cells to fill the vacuum surrounding the WDs -- this adds only 0.005 {\Msun} of material to the simulation.

Our SPH particles all have the same mass of $2\times10^{27}\,\mrm{g}$ ($1.3\times10^{6}$ particles are needed to represent the system), comparable to the highest resolutions used in other recent work \citep{pakm+12, rask+14}.  We likewise use the \arepo\ refinement scheme's to keep cell masses within a factor of $2$ of this value, and to keep adjacent cell volumes to within a relative factor of 10.  We additionally initialize a background grid of $10^{-5}\,\mrm{gcc}$ cells in \arepo\ to fill the vacuum surrounding the WDs -- this adds only 0.005 {\Msun} of material to the simulation.  Consequentely, our spatial resolution in \gasoline\ is about a factor of {\charles $3$} lower than that in \arepo\, but because the two codes differ so greatly regardless of resolution, we believe equivalent mass resolution to be the most appropriate comparison (see \citeauthor{voge+12} Sec. 2.3 for complications in achieving equivalent accuracy in SPH and grid codes).  \arepo's grid refinement scheme also naturally increases the resolution of our simulations over time, and so all \arepo\ resolutions stated are for the start of the simulation.  In Sec. \ref{ssec:c3_restest} we check if our results are resolution-dependent.

We run both simulation to 1000 s.  For the \gasoline\ simulation, this is long after its hydrodynamic evolution has completed, at $\sim400\,\mrm{s}$, and it begins a phase of slow secular spin-down due to artificial viscosity redistributing angular momentum.  Hydrodynamic evolution has also ended for the \arepo\ simulation by $\sim400\,\mrm{s}$, and the merger remnant also subsequently evolves much more slowly, but, as we shall see in Sec. \ref{sec:c3_results}, this further evolution is also hydrodynamic.

%our two high resolution runs to a \gasoline\ run with $1\times10^{28}\,\mrm{g}$ particle mass, comparable to those used in parameter-space sweeps \citep{dan+12, zhu+13, dan+14}, and an \arepo\ simulation with the same target cell mass.

%Factor of 5 in resolution comes from gasoline needing 100 neighbours, so its resolution R is given by 100V = 4/3piR^3 -> 2.87V^1/3 , while arepo has R = V^1/3, where V is the characteristic volume for a single point.  Gasoline techinically has a better resolution than that, since a cubic spline kernel counts nearby particles more highly, but there's some ambiguity in comparing between the two codes (for example, should R = 0.5V^1/3 for arepo?)
